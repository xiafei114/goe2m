<template>
  <a-modal
    title="{{ .EntityNote }}"
    :visible="visible"
    :confirmLoading="confirmLoading"
    @ok="handleSubmit"
    @cancel="handleCancel"
    :maskClosable="false"
  >
    <a-spin :spinning="confirmLoading">
      <a-form :form="form">
{{ .HTMLElementContent }}
      </a-form>
    </a-spin>
  </a-modal>
</template>

<script>
import { get{{ .EntityName }} } from '@/api/project/business/{{ .EntityNameLower }}'
import pick from 'lodash.pick'

export default {
  data () {
    return {
      visible: false,
      confirmLoading: false,
      form: this.$form.createForm(this),
      entityId: '',
      labelCol: { lg: { span: 10 }, sm: { span: 7 } },
      wrapperCol: { lg: { span: 14 }, sm: { span: 17 } },
      labelColBig: { lg: { span: 5 }, sm: { span: 7 } },
      wrapperColBig: { lg: { span: 19 }, sm: { span: 17 } },
      entity: {
{{ .HTMLEntityContent }}
      }
    }
  },
  methods: {
    add () {
      this.visible = true
    },
    clear () {
      this.form.setFieldsValue(this.entity)
      this.entityId = ''
    },
    edit (record) {
      this.visible = true
      this.$nextTick(() => {
        this.loadEditInfo(record)
      })
    },
    handleSubmit () {
      const { form: { validateFields } } = this
      this.confirmLoading = true
      validateFields((errors, values) => {
        if (!errors) {
          const action = this.entityId === '' ? 'add{{ .EntityName }}' : 'update{{ .EntityName }}'
          values.record_id = this.entityId
          this.$store.dispatch(action, values).then(res => {
            this.$notification['success']({
              message: '成功通知',
              description: this.entityId === '' ? '添加成功！' : '更新成功！'
            })
            this.visible = false
            this.confirmLoading = false
            this.clear()
            this.$emit('ok', values)
          }).catch(error => {
            const errorData = pick(error.response.data, ['error'])
            this.$notification['error']({
              message: '错误',
              description: errorData.error.message
            })
          })
            .finally(() => {
              this.confirmLoading = false
            })
        } else {
          this.confirmLoading = false
        }
      })
    },
    handleCancel () {
      this.clear()
      this.visible = false
    },
    loadEditInfo (data) {
      const { form } = this
      get{{ .EntityName }}(Object.assign(data.record_id))
        .then(res => {
          const formData = pick(res, [{{ .HTMLEntitys }}])
          this.entityId = formData.record_id
          form.setFieldsValue(formData)
        })
    }
  }
}
</script>