package project

import (
	"context"

	icontext "{{ .ProjectName }}/internal/app/project/context"
	"{{ .ProjectName }}/internal/app/project/model"
	"{{ .ProjectName }}/internal/app/project/schema"
	schemaProject "{{ .ProjectName }}/internal/app/project/schema/project"
	"{{ .ProjectName }}/pkg/errors"
	"{{ .ProjectName }}/pkg/util"
)

// New{{ .EntityName }} 创建{{ .EntityName }}
func New{{ .EntityName }}(m *model.Common) *{{ .EntityName }} {
	return &{{ .EntityName }}{
		{{ .EntityName }}Model: m.{{ .EntityName }},
	}
}

// {{ .EntityName }} 示例程序
type {{ .EntityName }} struct {
	{{ .EntityName }}Model model.I{{ .EntityName }}
}

// QueryPage 查询分页数据
func (a *{{ .EntityName }}) QueryPage(ctx context.Context, params schema.CommonQueryParam, pp *schema.PaginationParam) (interface{}, *schema.PaginationResult, error) {
	result, err := a.{{ .EntityName }}Model.Query(ctx, params, schema.CommonQueryOptions{PageParam: pp})
	if err != nil {
		return nil, nil, err
	}
	return result.Data, result.PageResult, nil
}

// QueryList 查询全部数据
func (a *{{ .EntityName }}) QueryList(ctx context.Context, params schema.CommonQueryParam) (interface{}, error) {
	result, err := a.{{ .EntityName }}Model.Query(ctx, params, schema.CommonQueryOptions{})
	if err != nil {
		return nil, err
	}
	return result.Data, nil
}

// Get 查询指定数据
func (a *{{ .EntityName }}) Get(ctx context.Context, recordID string) (*schemaProject.{{ .EntityName }}, error) {
	item, err := a.{{ .EntityName }}Model.Get(ctx, recordID)
	if err != nil {
		return nil, err
	} else if item == nil {
		return nil, errors.ErrNotFound
	}

	return item, nil
}

// CheckBaseCode 检查单号
func (a *{{ .EntityName }}) CheckBaseCode(ctx context.Context, code string) error {
	result, err := a.{{ .EntityName }}Model.Query(ctx, schema.CommonQueryParam{
		Code: code,
	}, schema.CommonQueryOptions{
		PageParam: &schema.PaginationParam{PageSize: -1},
	})
	if err != nil {
		return err
	} else if result.PageResult.Total > 0 {
		return errors.NewBadRequestError("编号已经存在")
	}
	return nil
}

// Create 创建数据
func (a *{{ .EntityName }}) Create(ctx context.Context, item schemaProject.{{ .EntityName }}) (*schemaProject.{{ .EntityName }}, error) {
	// err := a.CheckBaseCode(ctx, item.IndexCode)
	// if err != nil {
	// 	return nil, err
	// }

	item.RecordID = util.MustUUID()
	item.CreateUser = icontext.GetUserID(ctx)
	item.UpdateUser = icontext.GetUserID(ctx)
	// item.CompanyID = icontext.GetCompanyID(ctx)
	err := a.{{ .EntityName }}Model.Create(ctx, item)
	if err != nil {
		return nil, err
	}
	// return a.Get(ctx, recordID)
	return a.{{ .EntityName }}Model.BuildCacheEntity(ctx, item.RecordID)
}

// Update 更新数据
func (a *{{ .EntityName }}) Update(ctx context.Context, recordID string, item schemaProject.{{ .EntityName }}) (*schemaProject.{{ .EntityName }}, error) {
	oldItem, err := a.{{ .EntityName }}Model.Get(ctx, recordID)
	if err != nil {
		return nil, err
	} else if oldItem == nil {
		return nil, errors.ErrNotFound
	}
	//  else if oldItem.IndexCode != item.IndexCode {
	// 	err := a.CheckBaseCode(ctx, item.IndexCode)
	// 	if err != nil {
	// 		return nil, err
	// 	}
	// }

	item.UpdateUser = icontext.GetUserID(ctx)
	err = a.{{ .EntityName }}Model.UpdateMap(ctx, recordID, item)
	if err != nil {
		return nil, err
	}
	// return a.Get(ctx, recordID)
	return a.{{ .EntityName }}Model.BuildCacheEntity(ctx, item.RecordID)
}

// Delete 删除数据
func (a *{{ .EntityName }}) Delete(ctx context.Context, recordID string) error {
	err := a.{{ .EntityName }}Model.Delete(ctx, recordID)
	if err != nil {
		return err
	}
	return nil
}

// UpdateStatus 更新状态
func (a *{{ .EntityName }}) UpdateStatus(ctx context.Context, recordID string, status int) error {
	return a.{{ .EntityName }}Model.UpdateStatus(ctx, recordID, status)
}
