package model

import (
	"context"
	"fmt"

	entity "{{ .ProjectName }}/internal/app/project/model/gorm/entity/project"
	schema "{{ .ProjectName }}/internal/app/project/schema"
	schemaProject "{{ .ProjectName }}/internal/app/project/schema/project"
	"{{ .ProjectName }}/pkg/errors"
	"{{ .ProjectName }}/pkg/gormplus"
	"{{ .ProjectName }}/pkg/logger"
)

// New{{ .EntityName }} 创建{{ .EntityName }}存储实例
func New{{ .EntityName }}(db *gormplus.DB) *{{ .EntityName }} {
	return &{{ .EntityName }}{db}
}

// {{ .EntityName }} {{ .EntityName }}存储
type {{ .EntityName }} struct {
	db *gormplus.DB
}

func (a *{{ .EntityName }}) getFuncName(name string) string {
	return fmt.Sprintf("gorm.{{ .EntityName }}.%s", name)
}

func (a *{{ .EntityName }}) getQueryOption(opts ...schema.CommonQueryOptions) schema.CommonQueryOptions {
	var opt schema.CommonQueryOptions
	if len(opts) > 0 {
		opt = opts[0]
	}
	return opt
}

// Query 查询数据
func (a *{{ .EntityName }}) Query(ctx context.Context, params schema.CommonQueryParam, opts ...schema.CommonQueryOptions) (*schema.CommonQueryResult, error) {
	span := logger.StartSpan(ctx, "查询数据", a.getFuncName("Query"))
	defer span.Finish()

	db := entity.Get{{ .EntityName }}DB(ctx, a.db).DB
	if v := params.IndexCode; v != "" { //查询关联进程
		db = db.Where("company_Id=?", v)
	} else {
		db = db.Where("company_Id=?", "-1")
	}
	if v := params.ChnName; v != "" {
		db = db.Where("chn_Name LIKE ?", "%"+v+"%")
	}
	if v := params.Status; v > 0 {
		db = db.Where("status=?", v)
	}
	db = db.Order("id DESC")

	opt := a.getQueryOption(opts...)
	var list entity.{{ .EntityName }}s
	pr, err := WrapPageQuery(db, opt.PageParam, &list)
	if err != nil {
		span.Errorf(err.Error())
		return nil, errors.New("查询数据发生错误")
	}

	qr := &schema.CommonQueryResult{
		PageResult: pr,
		Data:       list.ToSchema{{ .EntityName }}s(),
	}

	return qr, nil
}

// Get 查询指定数据
func (a *{{ .EntityName }}) Get(ctx context.Context, recordID string, opts ...schema.CommonQueryOptions) (*schemaProject.{{ .EntityName }}, error) {
	span := logger.StartSpan(ctx, "查询指定数据", a.getFuncName("Get"))
	defer span.Finish()

	db := entity.Get{{ .EntityName }}DB(ctx, a.db).Where("record_id=?", recordID)
	var item entity.{{ .EntityName }}
	ok, err := a.db.FindOne(db, &item)
	if err != nil {
		span.Errorf(err.Error())
		return nil, errors.New("查询指定数据发生错误")
	} else if !ok {
		return nil, nil
	}

	sitem := item.ToSchema{{ .EntityName }}()
	return sitem, nil
}

// Create 创建数据
func (a *{{ .EntityName }}) Create(ctx context.Context, item schemaProject.{{ .EntityName }}) error {
	span := logger.StartSpan(ctx, "创建数据", a.getFuncName("Create"))
	defer span.Finish()

	return ExecTrans(ctx, a.db, func(ctx context.Context) error {
		sitem := entity.Schema{{ .EntityName }}(item)
		result := entity.Get{{ .EntityName }}DB(ctx, a.db).Create(sitem.To{{ .EntityName }}())
		if err := result.Error; err != nil {
			span.Errorf(err.Error())
			return errors.New("创建数据发生错误")
		}

		return nil
	})
}

// Update 更新数据
func (a *{{ .EntityName }}) Update(ctx context.Context, recordID string, item schemaProject.{{ .EntityName }}) error {
	span := logger.StartSpan(ctx, "更新数据", a.getFuncName("Update"))
	defer span.Finish()

	{{ .EntityName }} := entity.Schema{{ .EntityName }}(item).To{{ .EntityName }}()
	result := entity.Get{{ .EntityName }}DB(ctx, a.db).Where("record_id=?", recordID).Omit("record_id", "update_User_Id").Updates({{ .EntityName }})
	if err := result.Error; err != nil {
		span.Errorf(err.Error())
		return errors.New("更新数据发生错误")
	}
	return nil
}

// Delete 删除数据
func (a *{{ .EntityName }}) Delete(ctx context.Context, recordID string) error {
	span := logger.StartSpan(ctx, "删除数据", a.getFuncName("Delete"))
	defer span.Finish()

	result := entity.Get{{ .EntityName }}DB(ctx, a.db).Where("record_id=?", recordID).Delete(entity.{{ .EntityName }}{})
	if err := result.Error; err != nil {
		span.Errorf(err.Error())
		return errors.New("删除数据发生错误")
	}
	return nil
}

// UpdateStatus 更新状态
func (a *{{ .EntityName }}) UpdateStatus(ctx context.Context, recordID string, status int) error {
	span := logger.StartSpan(ctx, "更新状态", a.getFuncName("UpdateStatus"))
	defer span.Finish()

	result := entity.Get{{ .EntityName }}DB(ctx, a.db).Where("record_id=?", recordID).Update("status", status)
	if err := result.Error; err != nil {
		span.Errorf(err.Error())
		return errors.New("更新状态发生错误")
	}
	return nil
}
